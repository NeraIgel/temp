[ft_containers]
-. 개요 정리
	a. C++ 표준 템플릿 라이브러리의 몇 가지 컨테이너 유형을 구현한다. (vector, stack, map, set)
	b. C++98 표준을 준수해야 하므로, 컨테이너의 이후 기능은 구현하면 안되지만 모든 C++98 기능(더 이상 사용되지 않는 기능 포함)들은 구현한다.

	* 추가 구현 항목
		a. std::iterator_traits
		b. std::reverse_iterator
		c. std::enable_if (implement it in a C++98 manner)
		d. std::is_integral
		e. std::equal and/or std::lexicographical_compare
		f. std::pair
		g. std::make_pair

	* 요구 사항
		a. std::allocator를 사용하여 구현한다.
		b. vector<bool> 특수화를 수행할 필요가 없다.
		c. stack 컨테이너는 벡터 클래스를 기본 컨테이너로 사용한다.
		d. set 컨테이너는 반드시 Red-Black tree를 사용하여 구현한다.
		e. map::value_compare 구현을 위해서 friend 키워드 사용이 허용된다.
		f. 컨테이너의 비멤버 함수 오버로드 구현을 위해서 friend 키워드 사용이 허용된다.

-. 실행 방법 정의
	a. ./test seed

	* 구현하는 컨테이너 유형들의 네임스페이스는 “ft”이어야 한다.

-. 기반 기술 정리
	a. https://cplusplus.com/
	b. https://en.cppreference.com/w/
	c. https://github.com/microsoft/STL
	d. https://github.com/llvm/llvm-project/tree/main/libcxx
	e. https://github.com/gcc-mirror/gcc/tree/54c1bf7801758caf2ff54917e79a8c239643061c/libstdc%2B%2B-v3/include/bits

-. 검증 방법 정리
	a. subject
	b. https://github.com/mli42/containers_test
	c. https://github.com/greg-gav/ft_containers_tester
	d. https://github.com/divinepet/ft_containers-unit-test
	e. https://github.com/brian-xu-vlt/FT_CONTAINERS_42_tester

-. 자료 조사
	a. https://modoocode.com/255
	b. https://modoocode.com/295
	c. https://80000coding.oopy.io/ad7da304-36e9-4db0-aba7-db439cc8bac2
	d. https://github.com/yongjulejule/ft_containers/tree/fa4e0535dcdd04d911ac8c2ae5bf5c8e0cdd73d7
		d-a. algorithm / min								// TBD (ft::less로 대체 가능할듯)
		d-b. functional / x									// TBD (ft::min 대신 ft::less 사용하면 될듯)
		d-c. utility / std::functional, swap, select_first, identity		// TBD (어떤 목적으로 정의되었는지 확인해보고, 나만의 방법으로 풀어나갈 것)
		d-d. __vector_iterator / 
		d-e. __vector_base / 
		d-f. vector / 

	* https://stackoverflow.com/questions/38357089/why-does-stdtransform-and-similar-cast-the-for-loop-increment-to-void
	* https://stackoverflow.com/questions/10473284/a-struct-has-public-inheritance-by-default
	* https://www.ibm.com/docs/en/i/7.3?topic=only-partial-specialization-c
	* https://en.cppreference.com/w/cpp/language/partial_specialization
	* https://en.wikipedia.org/wiki/Exception_safety
	* https://scvgoe.github.io/2019-07-06-Exception-Safety/
	* https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=mug896&logNo=140168091611
	* https://en.wikipedia.org/wiki/Substitution_failure_is_not_an_error
	* https://stackoverflow.com/questions/4335962/how-to-check-if-a-template-parameter-is-an-iterator-type-or-not
	* https://stackoverflow.com/questions/69882795/what-is-a-difference-between-iterator-category-vs-iterator-category-in-stdit
	* TBD / ft::reverse_iterator::operator[] 구현부가 명세와 다른 것은 std::ptrdiff_t underflow 방지 목적인가?
	* https://42born2code.slack.com/archives/CMX2R5JSW/p1628521358211700
	* TBD / ft::vector::operator==() 비멤버 함수에서 size를 미리 호출하는 이유는? 컴파일타임 에러 확인 목적인건가?

	* https://stackoverflow.com/questions/839958/custom-iterator-in-c
	* https://stackoverflow.com/questions/3582608/how-to-correctly-implement-custom-iterators-and-const-iterators
	* https://stackoverflow.com/questions/8054273/how-to-implement-an-stl-style-iterator-and-avoid-common-pitfalls
	* https://stackoverflow.com/questions/7758580/writing-your-own-stl-container/7759622#7759622

	* https://gcc.gnu.org/legacy-ml/gcc/2011-08/msg00221.html
	* https://stackoverflow.com/questions/28516686/does-max-size-of-stdvectorchar-have-a-bug
	* https://carnation-visage-cc7.notion.site/ft_containers-fabfdb4bdcce4f139c900737acbb04ff

-. 개발 환경 정의
	a. C++98

-. 단위기능 목록 정의
	a. ft::container
		a-a. ft::vector
		a-b. ft::stack
		a-c. ft::map (using Splay tree)
		a-d. ft::set (using Red–black tree)
	b. ft::iterator
		b-a. ft::iterator_traits
		b-b. ft::reverse_iterator
	c. ft::type_traits
		c-a. ft::enable_if
		c-b. ft::is_integral
	d. ft::algorithm
		d-a. ft::equal
		d-b. ft::lexicographical_compare
	e. ft::utility
		e-a. ft::pair
		e-b. ft::make_pair
	f. ft::functional
		f-a. ft::less

-. 디렉토리 구조 정의
	— Makefile
	— include
		|- algorithm
		|- container
		|- functional
		|- iterator
		|- type_traits
		|- utility
	— src
		|- main.cpp
		|- main_bonus.cpp

-. 학습 참고 사이트
	a. https://modoocode.com/219
	b. https://modoocode.com/221
	c. https://modoocode.com/222
	d. https://modoocode.com/223
	e. https://modoocode.com/224
	f. https://modoocode.com/225
	g. https://modoocode.com/290
	h. https://woo-dev.tistory.com/51
	i. https://jiwondev.tistory.com/112
	j. https://www.programiz.com/dsa
	k. https://en.wikipedia.org/wiki/Splay_tree
	l. https://en.wikipedia.org/wiki/Red–black_tree
	m. https://suhwanc.tistory.com/197?category=730826
	n. https://justicehui.github.io/hard-algorithm/2018/11/12/SplayTree1/

-. 클래스 다이어그램 참고 사이트
	a. https://grayt.tistory.com/76
	b. https://www.researchgate.net/publication/2817207_UML_Description_of_the_STL
	c. https://commons.wikimedia.org/wiki/File:Diagramme_UML_de_STL.png
	d. https://stxxl.org/tags/1.4.1/design_map.html

