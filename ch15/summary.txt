(1) 프렌드 클래스
프렌드 클래스는 다른 클래스가 어떤 클래스의 프렌드가 되도록 지정할 때 사용할 수 있다.
프렌드 클래스는 예를 들어 아래와 같이 선언할 수 있다.
ex)	class Tv {
	public:
		friend class Remote;				// 프렌드 클래스 선언은 public, protected, private 부분 어디에나 둘 수 있다.
	};

	class Remote {
	};

(2) 프렌드 멤버 함수
프렌드 멤버 함수는 다른 클래스의 특정 멤버 함수들만 어떤 클래스의 프렌드가 되도록 지정할 때 사용할 수 있다.
프렌드 멤버 함수는 예를 들어 아래와 같이 지정할 수 있으며, 이 경우 선언 순서에 주의해야 한다.
이 때, 전방 선언(forward declaration)을 사용하여 바르게 동작하게 할 수 있다.
ex)	class Tv;
	class Remote {
	public:
		void	setChannel(Tv& t, int c);		// Remote 클래스 내부에서 Tv 클래스를 사용하기 때문에, Tv 클래스를 전방 선언해야 한다.
	};

	class Tv {
	public:
		friend void	Remote::setChannel(Tv& t, int c);	// Remote 클래스 선언이 Tv 클래스 선언보다 앞에 있어야 한다.
	private:
		int	_channel;
	};

	void	Remote::setChannel(Tv& t, int c)
	{
		t._channel = c;
	}

(3) 중첩 클래스
중첩 클래스(nested class)는 다른 클래스의 내부에 선언된 클래스를 의미한다.

(4) 예외 처리
C++의 예외 처리는 프로그램을 먹통으로 만드는 특별한 상황에 대처하는 메커니즘을 제공한다.
예외가 발생하면, 현재 실행 중인 함수가 종료되고, 예외 데이터형과 일치하는 catch 블록으로 제어가 넘어간다.

catch 블록들은 try 블록 바로 뒤에 온다.
예외를 포착하기 위해서는, 직접 또는 간접으로 예외를 발생시키는 함수 호출이 try 블록 안에 있어야 한다.
그러면 프로그램은 그 catch 블록 안에 있는 코드를 실행한다. 그 코드는 문제를 해결하려 시도할 수도 있고, 프로그램을 종료시킬 수도 있다.

그 클래스에 고유한 문제들이 감지될 때 발생할 수 있는, 내포된 예외 클래스들을 사용하여 클래스를 설계할 수 있다.
함수는, 그 함수에서 발생할 수 있는 예외들을 인식하는 예외 지정을 포함할 수 있다.

포착되지 않는 예외(일치하는 catch 블록이 없는 예외)는, 기본적으로 프로그램을 종료시킨다.
기대하지 않는 예외(예외 지정에 없는 예외)도, 기본적으로 프로그램을 종료시킨다.

(5) RTTI
RTTI(Run Time Type Information; 실행 시간 데이터형 정보)는 객체들의 데이터형을 식별하는 메커니즘이다.
RTTI 기능은 프로그램이 실행 시간에 객체의 데이터형을 인지하도록 허용한다.

(6) 데이터형 변환 연산자
C++의 데이터형 변환 연산자들은 데이터형 변환의 안전성을 개선한다.
