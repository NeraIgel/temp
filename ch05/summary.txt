스택(stack)은 후입 선출(LIFO: Last-In First-Out)의 형식으로 입출력이 일어나는 자료 구조이다.
스택에서의 입출력은 맨 위에서만 일어나고 스택의 중간에서는 데이터를 삭제할 수 없다.
스택은 자료의 출력 순서가 입력 순서의 역순으로 이루어져야 할 경우에 유용하다.

가장 전형적인 스택의 사용 예는 함수 호출에서 복귀주소를 기억하는데 스택을 사용하는 것이다.
함수는 수행이 끝나면 가장 최근에 자신을 호출한 함수로 되돌아가야 한다. 이 경우, 스택을 사용할 수 있다.
함수가 호출된 순으로 스택에 현재 수행 중인 문장의 주소를 저장하고, 하나의 함수가 끝나면 스택에서 복귀 주소를 구해서 그 곳으로 되돌아가는 것이다.

이 때 사용되는 스택은 운영체제만 사용하는 시스템 스택이다.
이 시스템 스택에는 함수가 호출될 때마다 활성화 레코드가 만들어지며 여기에 현재 수행되는 명령어의 주소인 프로그램 카운터(program counter) 값이 기록된다. 이 pc 값이 복귀주소가 된다.

(1) 스택 ADT
-. 객체 : n개의 element형의 요소들의 순서있는 모임
-. 연산 :
	a. create() ::= 스택을 생성한다.
	b. is_empty(s) ::= 스택이 비어있는지를 검사한다.
	c. push(s, e) ::= 스택의 맨 위에 요소 e를 추가한다.
	d. pop(s) ::= 스택의 맨 위에 있는 요소를 삭제한다.
	e. peek(s) ::= 스택의 맨 위에 있는 요소를 삭제하지 않고 반환한다.

(2) 스택 구현
연결 리스트를 이용하여 구현하는 스택에서의 push/pop 연산은 개념적으로 연결 리스트에서 마지막 노드를 추가/삭제하는 것과 동일하다.
연결 리스트를 이용하여 구현하는 스택은 다음과 같이 정의된다.
	typedef struct s_StackNode
	{
		void			*content;
		struct s_StackNode	*prev;
		struct s_StackNode	*next;
	}	t_StackNode;

	typedef struct s_LinkedStackType
	{
		t_StackNode	*head;
		size_t		size;
	}	t_LinkedStackType;

(3) 스택 응용
	a. 괄호 검사
	: 괄호 사용의 오류를 검사하는데 스택을 사용할 수 있다.
		a-a. 문자열을 순회한다.
			a-a-a. 왼쪽 괄호를 만나면, 스택에 삽입한다.
			a-a-b. 오른쪽 괄호를 만나면, 스택에서 맨 위의 괄호를 꺼낸 후 오른쪽 괄호와 짝이 맞는지를 검사한다.
			a-a-c. 이 때, 스택이 비어 있거나 괄호의 짝이 맞지 않으면 오류로 판단한다.
		a-b. 문자열 순회가 끝난 후에도 스택이 비어 있지 않으면 오류로 판단한다.

	b. 미로 탐색
	: 미로 탐색에도 스택을 사용할 수 있다.
	  미로 탐색을 위한 기본적인 방법은 하나의 경로를 선택해서 시도해보고, 안 될 경우 다른 경로를 선택하는 것이다.
	  이 때, 가능한 경로들이 저장되는데 그 중에서 가장 최근에 저장한 경로가 쉽게 추출되는 자료 구조인 스택을 사용하는 것이 자연스럽다.
	  	b-a. 현재 위치가 출구가 아닌 경우 반복한다.
			b-a-a. 현재 위치를 방문한 것으로 표기한다.
			b-a-b. 현재 위치의 위, 아래, 왼쪽, 오른쪽 위치가 아직 방문되지 않았고 갈 수 있으면, 그 위치들을 스택에 삽입한다.
			b-a-c. 스택이 비어있으면, 오류로 판단한다.
			b-a-d. 스택이 비어있지 않으면, 스택에서 하나의 위치를 꺼내어 현재 위치로 만든다.

	c. 후위 표기 수식 계산
	: 후위 표기 수식 계산에도 스택을 사용할 수 있다.
	  후위 표기 수식은 연산자가 피연산자 뒤에 위치하므로, 수식의 피연산자는 스택에 저장하고 연산자를 만나면 스택에서 꺼내어 계산하는 방식을 취할 수 있다.
		c-a. 수식 문자열을 순회한다.
			c-a-a. 항목이 피연산자이면, 스택에 삽입한다.
			c-a-b. 항목이 단항연산자이면, 스택에서 1개의 피연산자를 꺼낸 후 연산을 수행한다.
			c-a-c. 항목이 이항연산자이면, 스택에서 2개의 피연산자를 꺼낸 후 연산을 수행한다.
			c-a-d. 앞선 연산의 결과값을 다시 스택에 삽입한다.
		c-b. 스택에 남아있는 최종 값을 꺼내어, 리턴한다.

(4) 후위 표기법 vs 중위 표기법
수식을 표기하는 방법에는 중위(infix), 후위(postfix), 전위(prefix)의 3가지 방법이 있다.
연산자가 피연산자 사이에 있으면 중위이고, 연산자가 피연산자 뒤에 있으면 후위이다.
인간은 주로 중위 표기법을 사용하지만, 컴파일러는 주로 후위 표기법을 사용한다.
-. 중위 표기법 : 2+3*4
-. 후위 표기법 : 234*+
-. 전위 표기법 : +2*34

프로그래머가 수식을 중위 표기법으로 작성하면 컴파일러는 이 것을 후위 표기법으로 변환한 다음, 이를 스택을 이용하여 계산한다.
컴파일러에서 후위 표기법을 선호하는 이유는 다음과 같다.
-. 후위 표기법에서는 괄호가 필요 없다.
-. 후위 표기법에서는 연산자의 우선순위도 생각할 필요 없다.
-. 후위 표기법에서는 수식을 읽으면서 곧바로 계산이 가능하다.
