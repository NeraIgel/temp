컴퓨터 프로그램은 자료(data)를 처리하고, 이들 자료는 자료 구조(data structure)를 사용하여 표현되고 저장된다.
또한, 주어진 문제를 처리하는 절차가 필요하다. 이 것은 알고리즘(algorithm)이라고 불린다.
따라서, 프로그램은 논리적으로 자료 구조와 알고리즘으로 구성되어 있다고 볼 수 있다.

(1) 추상 데이터 타입(Abstract-Data-Type)
프로그램에서 데이터(data)란 처리의 대상이 되는 모든 것을 말한다.
데이터 타입(data type)이란 데이터의 집합과 이러한 데이터에 적용할 수 있는 연산의 집합을 의미한다.
추상 데이터 타입(ADT)이란 새로운 데이터 타입을 추상적으로 정의한 것으로서, 자료 구조는 이러한 추상 데이터 타입을 프로그래밍 언어로 구현한 것이라고 할 수 있다.

추상 데이터 타입은 데이터 타입의 정의가 그 데이터 타입의 구현으로부터 분리된 데이터 타입을 말한다.
추상 데이터 타입에서는 데이터나 연산이 무엇인가는 정의되지만, 데이터나 연산을 어떻게 구현할 것인지는 정의되지 않는다.

추상 데이터 타입은 먼저 데이터 객체의 정의부터 시작한다.
그 다음으로, 연산들이 정의된다. 연산의 정의에는 연산의 이름, 매개변수, 연산의 결과, 연산이 수행하는 기능의 기술 등이 포함된다.

컴퓨터 프로그램 안에서 추상 데이터 타입이 구현될 때 보통 구현세부사항은 외부에 알리지 않고 외부와의 인터페이스만을 공개하게 된다.
추상 데이터 타입의 사용자는 구현세부사항이 아닌 인터페이스만 사용하기 때문에 추상 데이터 타입의 구현은 뒤에 변경될 수 있다. 이 것이 정보은닉의 기본 개념이다.

(2) 알고리즘 성능 분석
효율적인 알고리즘은 알고리즘이 시작하여 결과가 나올 때까지의 수행 시간이 짧으면서 컴퓨터 내에 있는 메모리와 같은 자원을 덜 사용하는 알고리즘이다.
일반적으로, 수행 시간이 메모리 공간보다도 더 중요하게 고려되기 때문에 알고리즘의 수행 시간을 효율적인 알고리즘의 기준으로 삼는 편이다.

수행 시간 측정 방법은 2가지 정도가 있다.
-. 알고리즘을 구현한 후, clock() 등의 함수를 사용하여 수행 시간을 측정
-. 알고리즘을 구현하지 않고도, 알고리즘의 효율성을 판단하는 알고리즘 복잡도 분석을 사용하여 측정

알고리즘 복잡도 분석에서는 2가지 측면을 고려한다.
-. 시간 복잡도 분석 : 알고리즘 수행 시간 분석
-. 공간 복잡도 분석 : 알고리즘 기억 공간 분석

일반적으로, 수행 시간 분석을 중요시하기 때문에 시간 복잡도 분석을 사용한다.
시간 복잡도는 알고리즘을 이루고 있는 연산들이 몇 번이나 수행되는지를 숫자로 표시한다.
그런데, 연산들의 수행 횟수는 보통 그 값이 변하지 않는 상수가 아니라, 입력의 개수에 영향을 받는다.
따라서, 연산의 수를 입력의 개수 n의 함수로 나타낸 것을 시간 복잡도 함수라 하고 T(n)이라고 표기한다.

(3) 시간 복잡도 함수
일반적으로, 입력의 개수 n과 시간 복잡도 함수 T(n)의 관계는 복잡할 수 있다.
하지만, 자료의 개수가 많은 경우에는 차수가 가장 큰 항이 가장 영향을 크게 미치고 다른 항들은 상대적으로 무시될 수 있다.
시간 복잡도 함수에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게 할 목적으로 시간 복잡도를 표시하는 방법을 빅오 표기법(big-oh notation)이라고 한다.

빅오 표기법에 의한 알고리즘 수행 시간을 순차적으로 나열하면 아래와 같다.
-. O(1) < O(log n) < O(n) < O(nlogn) < O(n^2) < O(2^n) < O(n!)

시간 복잡도 함수는 빅오 표기법을 포함하여 3가지 정도가 있으며, 용도는 아래와 같다.
-. 빅오 표기법 : 상한선을 표현하며, 최악의 경우를 평가한다.
-. 빅오메가 표기법 : 하한선을 표현하며, 최선의 경우를 평가한다.
-. 빅세타 표기법 : 상한선과 하한선을 표현하며, 평균적인 경우를 평가한다.
