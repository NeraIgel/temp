[Inception]
-. 개요 정리
	a. Docker를 사용하여 다양한 서비스로 구성된 소규모 인프라를 설정한다. (NGINX, WordPress+php-fpm, MariaDB)

	* Docker는 리눅스의 응용 프로그램들을 프로세스 격리 기술들을 사용하여 컨테이너로 실행하고 관리하는 오픈 소스 프로젝트이다.
	* Docker는 리눅스의 컨테이너를 실행하고 관리하는 도구이기 때문에, Mac 또는 Windows 운영체제에서 구동하기 위해서는 도커 데스크탑(유료) 또는 가상 머신을 사용해야 한다.
	* Dockerfile들을 미리 작성하여 준비하고, 가상 머신의 리눅스(게스트) 운영체제에 Docker를 설치 후 준비한 Dockerfile들을 빌드함으로써 Docker Image들을 생성하고 이를 바탕으로 Docker Container들을 실행시킬 수 있다.

-. 실행 방법 정의
	a. VirtualBox

	* 프로젝트는 가상 머신에서 실행된다.
	* 프로젝트 구성에 필요한 모든 파일은 srcs 폴더에 있어야 한다.
	* Makefile도 필요하며 디렉토리의 루트에 있어야 한다. Makefile은 반드시 모든 애플리케이션을 설정해야 한다. (즉, docker-compose.yml을 사용해서 도커 이미지들을 생성해야 한다.)

-. 기반 기술 정리
	a. https://docs.docker.com
	b. https://www.nginx.com/
	c. https://wordpress.com/
	d. https://mariadb.org/
	e. https://www.alpinelinux.org/
	f. https://www.debian.org/
		f-a. https://debianusers.or.kr/
		f-b. https://wiki.debianusers.or.kr/index.php?title=%EB%8C%80%EB%AC%B8

-. 검증 방법 정리
	a. subject

-. 자료 조사
	a. WSL2
		a-a. https://docs.docker.com/desktop/windows/wsl/
		a-b. https://docs.docker.com/engine/install/ubuntu/
		a-c. https://docs.docker.com/engine/install/troubleshoot/
		a-d. https://docs.docker.com/engine/install/linux-postinstall/
		a-e. https://learn.microsoft.com/ko-kr/windows/wsl/tutorials/wsl-containers
		a-f. https://dev.epiloum.net/2063
		a-g. https://netmarble.engineering/journey-to-wsl2-and-trouble-shooting/
		a-h. https://netmarble.engineering/wsl2-static-ip-scheduler-settings
		a-i. https://netmarble.engineering/docker-on-wsl2-without-docker-desktop/
		a-j. https://nickjanetakis.com/blog/install-docker-in-wsl-2-without-docker-desktop
		a-k. https://dev.to/_nicolas_louis_/how-to-run-docker-on-windows-without-docker-desktop-hik
	b. NGINX
	c. WordPress
	d. MariaDB
	e. docker compose
	f. Makefile for docker
	g. Debian configuration for docker
		g-a. https://wiki.debianusers.or.kr/index.php?title=%EB%B2%84%EC%B6%94%EC%96%BC%EB%B0%95%EC%8A%A4%EC%97%90_%EB%8D%B0%EB%B9%84%EC%95%88_%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0
		g-b. https://wiki.debianusers.or.kr/index.php?title=%EB%8D%B0%EB%B9%84%EC%95%88_10(buster)_%EC%84%A4%EC%B9%98
		g-c. https://developer-eun-diary.tistory.com/135

	* https://bigpel66.oopy.io/library/docker/docker
	* https://bigpel66.oopy.io/library/42/inner-circle/20
	* https://bigpel66.oopy.io/library/42/reference/20#7790b675-e312-403e-b3ff-d1887b76f4f5
	* https://80000coding.oopy.io/969858b3-0baf-4f5a-a8b2-6749021601c6#969858b3-0baf-4f5a-a8b2-6749021601c6
	* https://80000coding.oopy.io/d6e6ca38-d413-47ba-a80b-a1b4f40886ab#d6e6ca38-d413-47ba-a80b-a1b4f40886ab
	* https://80000coding.oopy.io/8e5f46b5-c0b1-44d5-ac77-3446bbaf8ffa#8e5f46b5-c0b1-44d5-ac77-3446bbaf8ffa
	* https://80000coding.oopy.io/3305be9c-43a0-4371-9109-d729def6210b#3305be9c-43a0-4371-9109-d729def6210b
	* https://learn.microsoft.com/ko-kr/visualstudio/docker/tutorials/tutorial-multi-container-app-mysql

-. 개발 환경 정의
	a. Windows10 WSL2
	b. iMac VirtualBox Debian

-. 단위기능 목록 정의
	a. TLSv1.2 또는 TLSv1.3만 있는 NGINX를 포함하는 도커 컨테이너
	b. nginx 없이 WordPress+php-fpm만 포함하는 도커 컨테이너
	c. nginx 없이 MariaDB만 포함하는 도커 컨테이너
	d. docker-compose.yml
		d-a. WordPress 데이터베이스가 포함된 볼륨
		d-b. WordPress 웹사이트 파일이 포함된 두 번째 볼륨
		d-c. 도커 컨테이너 간의 연결을 설정하는 도커 네트워크

	* 서비스는 컨테이너에서 실행되어야 한다.
	* 서비스는 하나씩 자체 Dockerfile을 작성해야 한다.
	* 도커 컨테이너는 Alpine 또는 Debian의 안정적인 버전(최신 버전의 이전 버전)에서 만들어져야 한다.
	* 도커 이미지를 직접 만들어야 하며, DockerHub와 같은 서비스를 사용하는 것뿐만 아니라 만들어진 도커 이미지를 가져오는 것은 금지된다. (단, Alpine/Debian은 이 규칙에서 제외된다.)

-. 디렉토리 구조 정의
	— Makefile
	— srcs
		|- doker-compose.yml
		|- .env
		|- requirements
			|- bonus
			|- mariadb
				|- conf
				|- Dockerfile
				|- .dockerignore
				|- tools
			|- nginx
				|- conf
				|- Dockerfile
				|- .dockerignore
				|- tools
			|- tools
			|- wordpress

-. 학습 참고 사이트
	a. https://en.wikipedia.org/wiki/Docker_(software)
	b. https://www.44bits.io/ko/keyword/linux-container
	c. https://www.44bits.io/ko/post/why-should-i-use-docker-container
	d. https://www.44bits.io/ko/post/building-docker-image-basic-commit-diff-and-dockerfile
	e. https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html
	f. https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html
	g. https://byungwoo.oopy.io/0e5485ba-dc5e-4951-a611-81ce08291817
	h. https://subicura.com/2017/02/10/docker-guide-for-beginners-create-image-and-deploy.html
	i. https://subicura.com/2016/06/07/zero-downtime-docker-deployment.html
	j. https://cultivo-hy.github.io/docker/image/usage/2019/03/14/Docker%EC%A0%95%EB%A6%AC/
	k. https://asung123456.tistory.com/51
	l. https://swalloow.github.io/container-tini-dumb-init/
	m. https://www.hahwul.com/2022/08/06/docker-dumb-init/
	n. https://cloud.google.com/architecture/best-practices-for-building-containers?hl=ko#signal-handling
	o. https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction
	p. https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504
	q. https://medium.com/@saschagrunert/demystifying-containers-part-ii-container-runtimes-e363aa378f25
	r. https://medium.com/@saschagrunert/demystifying-containers-part-iii-container-images-244865de6fef
	s. https://engineer-mole.tistory.com/221
	t. https://darrengwon.tistory.com/793
	u. https://valuelog.tistory.com/69
	v. https://shinjam.tistory.com/entry/docker-compose-VS-docker-compose?category=891607
	w. https://stackoverflow.com/questions/66514436/difference-between-docker-compose-and-docker-compose
	x. https://namu.wiki/w/Alpine%20Linux
	y. https://en.wikipedia.org/wiki/Alpine_Linux
	z. https://velog.io/@dry8r3ad/why-alpine-linux

